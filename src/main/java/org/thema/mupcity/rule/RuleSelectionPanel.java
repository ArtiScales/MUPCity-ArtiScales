/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thema.mupcity.rule;

import java.awt.Frame;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.thema.mupcity.AHP;
import org.thema.mupcity.AHPDialog;
import org.thema.mupcity.Project;
import org.thema.mupcity.scenario.Scenario;
import org.thema.common.param.XMLParams;

/**
 *
 * @author gvuidel
 */
public class RuleSelectionPanel extends javax.swing.JPanel {

    AHP ahp;
    
    public RuleSelectionPanel() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        // pour la phase de d√©veloppement dans NetBeans
        if(Project.getProject() == null)
            for(Rule rule : Project.RULES)
                model.addRow(new Object[]{rule, true, 1.0});
        else
            for(Rule rule : Project.getProject().getRules())
                if(rule.isUsable())
                    model.addRow(new Object[]{rule, true, 1.0});
    }
    
    public RuleSelectionPanel(Map<String, Double> coefRules) {
        initComponents();
        setCoefRules(coefRules);
    }

    public void setCoefRules(Map<String, Double> coefRules) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setNumRows(0);
        for(Rule rule : Project.getProject().getRules())
            if(rule.isUsable())
                if(coefRules.containsKey(rule.getName())) 
                    model.addRow(new Object[]{rule, true, coefRules.get(rule.getName())});
                else
                    model.addRow(new Object[]{rule, false, Double.NaN});
    }
    
    public Map<String, Double> getCoefRules() {
       Map<String, Double> coefRules = new LinkedHashMap<String, Double>();
       DefaultTableModel model = (DefaultTableModel) table.getModel();
       for(int i = 0; i < model.getRowCount(); i++)
           if((Boolean)model.getValueAt(i, 1))
               coefRules.put(((Rule)model.getValueAt(i, 0)).getName(), (Double)model.getValueAt(i, 2));
       return coefRules;
    }

    public AHP getAHP() {
        updateAHP();
        return ahp;
    }
    
    public boolean isAgregMean() {
        return meanCheckBox.isSelected();      
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        ahpButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        meanCheckBox = new javax.swing.JCheckBox();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rule", "Enabled", "Coef"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        ahpButton.setText("Define coef by AHP");
        ahpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ahpButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        meanCheckBox.setText("mean");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(importButton)
                .addGap(18, 18, 18)
                .addComponent(meanCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(ahpButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ahpButton)
                    .addComponent(importButton)
                    .addComponent(meanCheckBox)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateAHP() {
        Set<String> rules = getCoefRules().keySet();
        if(ahp == null || !ahp.getMatrix().getKeys1().containsAll(rules))
            ahp = new AHP(new ArrayList<String>(rules));
        else {
//            if(!ahp.getMatrix().getKeys1().containsAll(rules))
//                for(String rule : rules) {
//                    ahp.getMatrix().addKey1(rule);
//                    ahp.getMatrix().addKey2(rule);
//                }
            
            if(!rules.containsAll(ahp.getMatrix().getKeys1())) {
                HashSet<String> set = new HashSet<String>(ahp.getMatrix().getKeys1());
                set.removeAll(rules);
                for(String rule : set)  {
                    ahp.getMatrix().removeKey1(rule);
                    ahp.getMatrix().removeKey2(rule);
                }
            }   
            
        }
    }
    private void ahpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ahpButtonActionPerformed
        updateAHP();
        AHPDialog dlg = new AHPDialog(null, ahp);
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        ahp = dlg.ahp;
        setCoefRules(ahp.getCoefs());
    }//GEN-LAST:event_ahpButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        List<Scenario> scenarios = new ArrayList<Scenario>(Project.getProject().getScenarioAutos());
        scenarios.addAll(Project.getProject().getScenarios());
        if(scenarios.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No scenarios");
            return;
        }
        Scenario sel = (Scenario) JOptionPane.showInputDialog(this, "Select scenario :", "Import parameters", 
                JOptionPane.PLAIN_MESSAGE, null, scenarios.toArray(), null);
        if(sel == null)
            return;
        
        ahp = XMLParams.dupplicate(sel.getAHP());
        setCoefRules(ahp.getCoefs());
        
    }//GEN-LAST:event_importButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ahpButton;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox meanCheckBox;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
