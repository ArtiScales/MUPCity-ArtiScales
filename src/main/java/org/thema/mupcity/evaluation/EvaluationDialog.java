/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EvaluationDialog.java
 *
 * Created on 15 mars 2010, 09:36:28
 */

package org.thema.mupcity.evaluation;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.PrecisionModel;
import com.vividsolutions.jts.precision.GeometryPrecisionReducer;
import java.awt.Frame;
import java.awt.image.DataBuffer;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.thema.GlobalDataStore;
import org.thema.common.parallel.BufferForkJoinTask;
import org.thema.common.parallel.TaskMonitor;
import org.thema.msca.Cell;
import org.thema.msca.MSGridBuilder;
import org.thema.msca.SquareGrid;
import org.thema.msca.SquareGridExtent;
import org.thema.msca.operation.AbstractLayerOperation;
import org.thema.msca.operation.SimpleGeomOperation;
import org.thema.mupcity.Project;
import org.thema.mupcity.scenario.Scenario;
import org.thema.drawshape.feature.Feature;
import org.thema.drawshape.feature.FeatureCoverage;
import org.thema.drawshape.feature.FeatureFilter;
import org.thema.drawshape.layer.RasterLayer;
import org.thema.drawshape.ui.MapInternalFrame;
import org.thema.graph.SpatialGraph;
import org.thema.msca.GridFeatureCoverage;
import org.thema.msca.GridGroupLayer;
import org.thema.msca.operation.MeanOperation;
import org.thema.mupcity.MainFrame;
import org.thema.mupcity.operation.YagerAgregOperation;

/**
 *
 * @author gvuidel
 */
public class EvaluationDialog extends javax.swing.JDialog {

    Project project;

    /** Creates new form EvaluationDialog */
    public EvaluationDialog(java.awt.Frame parent, Project project) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
        getRootPane().setDefaultButton(okButton);
        this.project = project;
        scenarioComboBox.setModel(new DefaultComboBoxModel(project.getScenarioAutos().toArray()));
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        buildResidselectFilePanel = new org.thema.common.swing.SelectFilePanel();
        buildTotselectFilePanel = new org.thema.common.swing.SelectFilePanel();
        seuilSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        netN1SelectFilePanel = new org.thema.common.swing.SelectFilePanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        extScenarioSelectFilePanel = new org.thema.common.swing.SelectFilePanel();
        evalParamButton = new javax.swing.JButton();
        scenarioRadioButton = new javax.swing.JRadioButton();
        scenarioComboBox = new javax.swing.JComboBox();
        externScenarioRadioButton = new javax.swing.JRadioButton();
        evalSelectionPanel = new org.thema.mupcity.evaluation.EvaluatorSelectionPanel();
        jLabel5 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/thema/mupcity/evaluation/Bundle"); // NOI18N
        setTitle(bundle.getString("EvaluationDialog.title_1")); // NOI18N

        okButton.setText(bundle.getString("EvaluationDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("EvaluationDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buildResidselectFilePanel.setDescription(bundle.getString("EvaluationDialog.buildResidselectFilePanel.description")); // NOI18N
        buildResidselectFilePanel.setFileDesc(bundle.getString("EvaluationDialog.buildResidselectFilePanel.fileDesc")); // NOI18N
        buildResidselectFilePanel.setFileExts(bundle.getString("EvaluationDialog.buildResidselectFilePanel.fileExts")); // NOI18N

        buildTotselectFilePanel.setDescription(bundle.getString("EvaluationDialog.buildTotselectFilePanel.description")); // NOI18N
        buildTotselectFilePanel.setFileDesc(bundle.getString("EvaluationDialog.buildTotselectFilePanel.fileDesc")); // NOI18N
        buildTotselectFilePanel.setFileExts(bundle.getString("EvaluationDialog.buildTotselectFilePanel.fileExts")); // NOI18N

        jLabel1.setText(bundle.getString("EvaluationDialog.jLabel1.text")); // NOI18N

        netN1SelectFilePanel.setDescription(bundle.getString("EvaluationDialog.netN1SelectFilePanel.description")); // NOI18N
        netN1SelectFilePanel.setFileDesc(bundle.getString("EvaluationDialog.netN1SelectFilePanel.fileDesc")); // NOI18N
        netN1SelectFilePanel.setFileExts(bundle.getString("EvaluationDialog.netN1SelectFilePanel.fileExts")); // NOI18N

        jLabel4.setText(bundle.getString("EvaluationDialog.jLabel4.text")); // NOI18N

        jLabel6.setText(bundle.getString("EvaluationDialog.jLabel6.text")); // NOI18N

        extScenarioSelectFilePanel.setDescription(bundle.getString("EvaluationDialog.extScenarioSelectFilePanel.description")); // NOI18N
        extScenarioSelectFilePanel.setFileDesc(bundle.getString("EvaluationDialog.extScenarioSelectFilePanel.fileDesc")); // NOI18N
        extScenarioSelectFilePanel.setFileExts(bundle.getString("EvaluationDialog.extScenarioSelectFilePanel.fileExts")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, externScenarioRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), extScenarioSelectFilePanel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        evalParamButton.setText(bundle.getString("EvaluationDialog.evalParamButton.text")); // NOI18N
        evalParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evalParamButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(scenarioRadioButton);
        scenarioRadioButton.setSelected(true);
        scenarioRadioButton.setText(bundle.getString("EvaluationDialog.scenarioRadioButton.text")); // NOI18N

        scenarioComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, scenarioRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), scenarioComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        buttonGroup1.add(externScenarioRadioButton);
        externScenarioRadioButton.setText(bundle.getString("EvaluationDialog.externScenarioRadioButton.text")); // NOI18N

        jLabel5.setText(bundle.getString("EvaluationDialog.jLabel5.text")); // NOI18N

        nameTextField.setText(bundle.getString("EvaluationDialog.nameTextField.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(4, 4, 4)
                        .add(nameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(buildResidselectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(netN1SelectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(buildTotselectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                        .add(63, 63, 63)
                        .add(seuilSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(evalParamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(evalSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(scenarioRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(2, 2, 2)
                        .add(scenarioComboBox, 0, 396, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(externScenarioRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(extScenarioSelectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(418, 418, 418)
                        .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                        .add(6, 6, 6)
                        .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(nameTextField))
                .add(6, 6, 6)
                .add(buildResidselectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(6, 6, 6)
                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(6, 6, 6)
                .add(netN1SelectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(1, 1, 1)
                .add(buildTotselectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(seuilSpinner))
                .add(11, 11, 11)
                .add(evalParamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(evalSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scenarioRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(scenarioComboBox)))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(externScenarioRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(extScenarioSelectFilePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        new Thread(new Runnable() {
            public void run() {
                 try {
                    final TaskMonitor monitor = new TaskMonitor(getParent(), "Evaluation...", "", 0, 10);
                    monitor.popupNow();
                    Scenario scenario;
            //        final ScenarioAuto defaultAnal = ScenarioAuto.createMonoScaleAnalysis("Empty", project.getMSGrid().getResolutions().last(), 0, new AHP(Collections.EMPTY_LIST), false, false);

            //            defaultAnal.perform(project.getMSGrid());
            //            analysis.add(defaultAnal);
                    if(scenarioRadioButton.isSelected())
                        scenario = (Scenario) scenarioComboBox.getSelectedItem();
                    else
                        scenario = new ExternalScenario(extScenarioSelectFilePanel.getSelectedFile());
                    
        
                    monitor.setNote("Initialisation...");
                    MSGridBuilder<SquareGridExtent> msGrid = project.getMSGrid();
                    File residFile = buildResidselectFilePanel.getSelectedFile();
                    // chargement du shapefile
                    Geometry resid = GlobalDataStore.createDataStore(residFile.getParentFile()).getGeometry(residFile.getName());
                    // crée la couche raster 
                    msGrid.addLayer(Evaluator.BATI_RESID, DataBuffer.TYPE_BYTE, 0);
                    // rasterisation du bati résidentiel
                    msGrid.visit(new SimpleGeomOperation(SimpleGeomOperation.ISEMPTY, Evaluator.BATI_RESID), resid);
                    // on supprime les cellules qui ne sont pas bati
                    msGrid.execute(new AbstractLayerOperation(4) {
                        public void perform(Cell cell) {
                            if (cell.getLayerValue(Project.BUILD) == 0 && cell.getLayerValue(Evaluator.BATI_RESID) == 1) {
                                cell.setLayerValue(Evaluator.BATI_RESID, 0);
                            }
                        }
                    });

                    // récupère la grille à la résolution la plus fine
                    SquareGrid grid = msGrid.getGrid(msGrid.getResolutions().last());

                    Geometry totBuildBuf = null;
                    if(buildTotselectFilePanel.getSelectedFile() != null) {
                        // chargement du bati total
                        Geometry totBuild = GlobalDataStore.createDataStore(buildTotselectFilePanel.getSelectedFile().getParentFile())
                                .getGeometry(buildTotselectFilePanel.getSelectedFile().getName());
                        double radius = ((Number)seuilSpinner.getValue()).doubleValue() / 2;
                        totBuildBuf = BufferForkJoinTask.threadedBuffer(totBuild, radius);
                        
                        // Création de la bordure urbaine en tenant compte des nouvelles cellules baties du scénario
                        GridFeatureCoverage cov = new GridFeatureCoverage(grid);
                        final String analLayer = scenario.getResultLayerName();
                        FeatureCoverage<GridFeatureCoverage.GridFeature> newBuild = cov.getCoverage(new FeatureFilter() {
                            public boolean accept(Feature f) {
                                return ((Number)f.getAttribute(analLayer)).intValue() == 2;
                            }
                        });

                        ArrayList<Geometry> geoms = new ArrayList<Geometry>();
                        for(Feature f : newBuild.getFeatures())
                            geoms.add(f.getGeometry().getCentroid());

                        Geometry buildBuf = BufferForkJoinTask.threadedBuffer(new GeometryFactory().buildGeometry(geoms), radius + 5);
                        if(buildBuf == null)
                            buildBuf = totBuildBuf;
                        else
                            buildBuf = buildBuf.union(totBuildBuf);
                        Geometry envelope = BufferForkJoinTask.threadedBuffer(buildBuf, -radius);
                        // bordure urbaine
                        Geometry envLine = envelope.getBoundary();
                        
                        for(Evaluator evaluator : project.getEvaluators()) {
                            if(evaluator instanceof NbCellOnEnvelopeEvaluator)
                                ((NbCellOnEnvelopeEvaluator)evaluator).setUrbanBorder(envLine);
                            else if(evaluator instanceof DistEnvelopeEvaluator)
                                ((DistEnvelopeEvaluator)evaluator).setUrbanBorder(envLine);
                        }
                    }
                    
                    if(netN1SelectFilePanel.getSelectedFile() != null) {
                        Geometry netGeom = GlobalDataStore.createDataStore(netN1SelectFilePanel.getSelectedFile().getParentFile())
                                .getGeometry(netN1SelectFilePanel.getSelectedFile().getName());
                        SpatialGraph graph= new SpatialGraph(GlobalDataStore.getFeatures(netN1SelectFilePanel.getSelectedFile(), null, null),
                                new GeometryPrecisionReducer(new PrecisionModel(10)));
                        for(Evaluator evaluator : project.getEvaluators()) {
                            if(evaluator instanceof DistMinAmenEvaluator)
                                ((DistMinAmenEvaluator)evaluator).setGraph(graph);
                            else if(evaluator instanceof NbAmenEvaluator)
                                ((NbAmenEvaluator)evaluator).setGraph(graph);
                            else if(evaluator instanceof DistEnvelopeEvaluator) {
                                ((DistEnvelopeEvaluator)evaluator).setGraph(graph);
                                ((DistEnvelopeEvaluator)evaluator).setNetGeom(netGeom);
                            }
                            else if(evaluator instanceof NbStationsEvaluator)
                                ((NbStationsEvaluator)evaluator).setGraph(graph);
                            
                        }
                    }
                    
                    
                    Map<String, Double> coefEvaluators = evalSelectionPanel.getCoefEvaluators();
                    monitor.setMaximum(coefEvaluators.size());
                    Map<String, Double> coefLayers = new HashMap<>();
                    for(Evaluator evaluator : project.getEvaluators()) {
                        if(!coefEvaluators.containsKey(evaluator.getShortName()))
                            continue;
                        
                        evaluator.execute(scenario, grid, monitor.getSubMonitor(0, 100, 1));
                        // change le shortname en nom du layer pour l'opération d'agrégation
                        coefLayers.put(evaluator.getEvalLayerName(scenario), coefEvaluators.get(evaluator.getShortName()));
                    }

                    if(evalSelectionPanel.isAgregMean()) {
                        grid.addDynamicLayer(scenario.getName() + "_eval_agreg", new MeanOperation(coefLayers, 4, false));
                    } else {
                        grid.addDynamicLayer(scenario.getName() + "_eval_agreg", new YagerAgregOperation(coefLayers));
                    }
                    
                    try {
                        MapInternalFrame frm = new MapInternalFrame();
                        GridGroupLayer gridGroupLayer = new GridGroupLayer("grid", grid, null);
                        
                        //new File(nameTextField + "/" + scenario.getName() + "_eval_agreg")
                        // création des sous répertoires 
                        File rep = new File (project.getDirectory().getAbsolutePath(), nameTextField.getText());
                        rep.mkdir();
                        File fichier = new File(rep.getAbsolutePath(), scenario.getName() + "_eval_agreg.tif");
                        ((RasterLayer)gridGroupLayer.getLayer(scenario.getName() + "_eval_agreg")).saveRaster(fichier);
                        
                     
                        List <Evaluator> listSelectEvaluator = new ArrayList<Evaluator>();
                        // boucler sur chaque evaluator et enregistrer le tif correspondant
                        for(Evaluator evaluator : project.getEvaluators()) {
                            // sélectionne uniquement les evaluators
                            if(!coefEvaluators.containsKey(evaluator.getShortName()))
                            continue;
                            listSelectEvaluator.add(evaluator);
                            fichier = new File(rep.getAbsolutePath(),  evaluator.getShortName() + ".tif");
                            ((RasterLayer)gridGroupLayer.getLayer(evaluator.getEvalLayerName(scenario))).saveRaster(fichier);
                        }
                        
                        // enregistrement en fichier xml des evaluators et ahp
                        EvaluatorSerialisation eval = new EvaluatorSerialisation(listSelectEvaluator, evalSelectionPanel.getAHP(), coefEvaluators);
                        eval.save(rep);
                        
                        
                        gridGroupLayer.setExpanded(true);
                        frm.getMapViewer().setRootLayer(gridGroupLayer);
                        frm.setName("Evaluation - " + scenario.getName());
                        frm.setTitle("Evaluation - " + scenario.getName());
                        ((MainFrame)getParent()).getDesktopPane().add(frm);
                        frm.setMaximum(true);
                        frm.setVisible(true);
                        frm.setSelected(true);
                        frm.getMapViewer().setTreeLayerVisible(true);
                        frm.getMapViewer().getMap().setZoom(project.getBounds());
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
//                    NbCellOnEnvelopeEvaluator nbCellEnvEval = null;
//                    if(totBuildBuf != null) {
//                        monitor.setNote("Envelope");
//                        nbCellEnvEval = new NbCellOnEnvelopeEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, project.getMSGrid(), grid,
//                                totBuildBuf, ((Number)seuilSpinner.getValue()).doubleValue());
//                    }
//
//                    DistEnvelopeEvaluator envEval = null;
//                    if(totBuildBuf != null && netN1SelectFilePanel.getSelectedFile() != null) {
//                        monitor.setNote("Envelope");
//                        envEval = new DistEnvelopeEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid,
//                            totBuildBuf, netN1SelectFilePanel.getSelectedFile(), ((Number)seuilSpinner.getValue()).doubleValue());
//                    }
//
//                    NbAmenEvaluator n1NbEval = null;
//                    DistMinAmenEvaluator n1MinEval = null;
////                    if(netN1SelectFilePanel.getSelectedFile() != null) {
//                    if(project.isLayerExist(Project.Layers.FACILITY)) {
//                        monitor.setNote("Facilities L1");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.FACILITY, 1);
//                        n1NbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distFacN1Spinner.getValue());
//                        n1MinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                    }
//
//                    NbAmenEvaluator n2NbEval = null;
//                    DistMinAmenEvaluator n2MinEval = null;
////                    if(netN2SelectFilePanel.getSelectedFile() != null) {
//                    if(project.isLayerExist(Project.Layers.FACILITY)) {
//                        monitor.setNote("Facilities L2");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.FACILITY, 2);
//                        n2NbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distFacN2Spinner.getValue());
//                        n2MinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                    }
//                    
//                    DistMinAmenEvaluator n3MinEval = null;
////                    if(netN2SelectFilePanel.getSelectedFile() != null) {
//                    if(project.isLayerExist(Project.Layers.FACILITY)) {
//                        monitor.setNote("Facilities L3");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.FACILITY, 3);
//                        n3MinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                    }
//                    
//                    NbAmenEvaluator n1LeiNbEval = null;
//                    DistMinAmenEvaluator n1LeiMinEval = null;
//                    if(project.isLayerExist(Project.Layers.LEISURE)) {
//                        monitor.setNote("Leisures L1");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.LEISURE, 1);
//                        n1LeiMinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                        n1LeiNbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distLeiN1Spinner.getValue());
//                    }
//                    
//                    NbAmenEvaluator n2LeiNbEval = null;
//                    DistMinAmenEvaluator n2LeiMinEval = null;
//                    if(project.isLayerExist(Project.Layers.LEISURE)) {
//                        monitor.setNote("Leisures L2");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.LEISURE, 2);
//                        n2LeiMinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                        n2LeiNbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distLeiN2Spinner.getValue());
//                    }
//                    
//                    NbAmenEvaluator n3LeiNbEval = null;
//                    DistMinAmenEvaluator n3LeiMinEval = null;
//                    if(project.isLayerExist(Project.Layers.LEISURE)) {
//                        monitor.setNote("Leisures L3");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.LEISURE, 3);
//                        n3LeiMinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                        n3LeiNbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distLeiN3Spinner.getValue());
//                    }
//                    
//                    NbAmenEvaluator busNbEval = null;
//                    if(project.isLayerExist(Project.Layers.BUS_STATION)) {
//                        monitor.setNote("Bus station");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.BUS_STATION);
//                        busNbEval = new NbAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist, (Integer)distBusSpinner.getValue());
//                    }
//                    
//                    DistMinAmenEvaluator trainMinEval = null;
//                    if(project.isLayerExist(Project.Layers.TRAIN_STATION)) {
//                        monitor.setNote("Train station");
//                        DistAmenities dist = new DistAmenities(project, Project.Layers.TRAIN_STATION);
//                        trainMinEval = new DistMinAmenEvaluator(monitor.getSubMonitor(0, analysis.size(), 1), analysis, grid, dist);
//                    }
//
//                    monitor.setNote("Noir/Blanc");
//                    NbNearWhiteEvaluator nearWhiteEval = new NbNearWhiteEvaluator(monitor, analysis, grid);
//                    MeanWhiteEvaluator meanEval = new MeanWhiteEvaluator(monitor, analysis, grid);
//                    NbCellEvaluator nbCell = new NbCellEvaluator(monitor, analysis, grid);
//                    
//                    StringBuilder res = new StringBuilder("Analyse\tNb Env\tDistmin Env\tDistmin facN1\tNb facL1\tDistmin facL2\tNb facN2\tDistmin facL3\t"
//                            + "Distmin leiL1\tNb leiL1\tDistmin leiL2\tNb leiL2\tDistmin leiL3\tNb leiL3\tNb bus\tDistmin train\tMeanWhiteCell\tNbNearWhite\tNbCell\n");
//                    for(Scenario anal : analysis) {
//                        res.append(anal + "\t");
//                        res.append(String.format("%g\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)"
//                                + "\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g (%g)\t%g\t%g\t%g\n",
//                                nbCellEnvEval == null ? Double.NaN : nbCellEnvEval.getResult().get(anal)[0],
//                                envEval == null ? Double.NaN : envEval.getResult().get(anal)[0],
//                                envEval == null ? Double.NaN : envEval.getResult().get(anal)[1],
//                                n1MinEval == null ? Double.NaN : n1MinEval.getResult().get(anal)[0],
//                                n1MinEval == null ? Double.NaN : n1MinEval.getResult().get(anal)[1],
//                                n1NbEval == null ? Double.NaN : n1NbEval.getResult().get(anal)[0],
//                                n1NbEval == null ? Double.NaN : n1NbEval.getResult().get(anal)[1],
//                                n2MinEval == null ? Double.NaN : n2MinEval.getResult().get(anal)[0],
//                                n2MinEval == null ? Double.NaN : n2MinEval.getResult().get(anal)[1],
//                                n2NbEval == null ? Double.NaN : n2NbEval.getResult().get(anal)[0],
//                                n2NbEval == null ? Double.NaN : n2NbEval.getResult().get(anal)[1],
//                                n3MinEval == null ? Double.NaN : n3MinEval.getResult().get(anal)[0],
//                                n3MinEval == null ? Double.NaN : n3MinEval.getResult().get(anal)[1],
//                                n1LeiMinEval == null ? Double.NaN : n1LeiMinEval.getResult().get(anal)[0],
//                                n1LeiMinEval == null ? Double.NaN : n1LeiMinEval.getResult().get(anal)[1],
//                                n1LeiNbEval == null ? Double.NaN : n1LeiNbEval.getResult().get(anal)[0],
//                                n1LeiNbEval == null ? Double.NaN : n1LeiNbEval.getResult().get(anal)[1],
//                                n2LeiMinEval == null ? Double.NaN : n2LeiMinEval.getResult().get(anal)[0],
//                                n2LeiMinEval == null ? Double.NaN : n2LeiMinEval.getResult().get(anal)[1],
//                                n2LeiNbEval == null ? Double.NaN : n2LeiNbEval.getResult().get(anal)[0],
//                                n2LeiNbEval == null ? Double.NaN : n2LeiNbEval.getResult().get(anal)[1],
//                                n3LeiMinEval == null ? Double.NaN : n3LeiMinEval.getResult().get(anal)[0],
//                                n3LeiMinEval == null ? Double.NaN : n3LeiMinEval.getResult().get(anal)[1],
//                                n3LeiNbEval == null ? Double.NaN : n3LeiNbEval.getResult().get(anal)[0],
//                                n3LeiNbEval == null ? Double.NaN : n3LeiNbEval.getResult().get(anal)[1],
//                                busNbEval == null ? Double.NaN : busNbEval.getResult().get(anal)[0],
//                                busNbEval == null ? Double.NaN : busNbEval.getResult().get(anal)[1],
//                                trainMinEval == null ? Double.NaN : trainMinEval.getResult().get(anal)[0],
//                                trainMinEval == null ? Double.NaN : trainMinEval.getResult().get(anal)[1],
//                                meanEval.getResult().get(anal)[0],
//                                nearWhiteEval.getResult().get(anal)[0],
//                                nbCell.getResult().get(anal)[0]));
//
//                    }
//
//                    res.append("\n\nNb new cell better\nAnalyse\tDistmin Env\tDistmin facL1\tNb facL1\tDistmin facL2\tNb facL2\tDistmin facL3"
//                            + "\tDistmin leiL1\tNb leiL1\tDistmin leiL2\tNb leiL2\tDistmin leiL3\tNb leiL3\tNb bus\tDistmin train\tMeanWhiteCell\tNbNewCell\n");
//                    for(Scenario anal : analysis) {
//                        res.append(anal + "\t");
//                        res.append(String.format("%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n",
//                                envEval == null ? Double.NaN : envEval.getResult().get(anal)[2],
//                                n1MinEval == null ? Double.NaN : n1MinEval.getResult().get(anal)[2],
//                                n1NbEval == null ? Double.NaN : n1NbEval.getResult().get(anal)[2],
//                                n2MinEval == null ? Double.NaN : n2MinEval.getResult().get(anal)[2],
//                                n2NbEval == null ? Double.NaN : n2NbEval.getResult().get(anal)[2],
//                                n3MinEval == null ? Double.NaN : n3MinEval.getResult().get(anal)[2],
//                                n1LeiMinEval == null ? Double.NaN : n1LeiMinEval.getResult().get(anal)[2],
//                                n1LeiNbEval == null ? Double.NaN : n1LeiNbEval.getResult().get(anal)[2],
//                                n2LeiMinEval == null ? Double.NaN : n2LeiMinEval.getResult().get(anal)[2],
//                                n2LeiNbEval == null ? Double.NaN : n2LeiNbEval.getResult().get(anal)[2],
//                                n3LeiMinEval == null ? Double.NaN : n3LeiMinEval.getResult().get(anal)[2],
//                                n3LeiNbEval == null ? Double.NaN : n3LeiNbEval.getResult().get(anal)[2],
//                                busNbEval == null ? Double.NaN : busNbEval.getResult().get(anal)[2],
//                                trainMinEval == null ? Double.NaN : trainMinEval.getResult().get(anal)[2],
//                                meanEval.getResult().get(anal)[2],
//                                nbCell.getResult().get(anal)[0] - nbCell.getResult().get(defaultAnal)[0]));
//
//                    }
//
//                    monitor.close();
//                    JOptionPane.showMessageDialog(null, new JScrollPane(new JTextArea(res.toString(), 20, 50)));
                    monitor.close();
                    setVisible(false);
                    dispose();
                } catch (Exception ex) {
                    Logger.getLogger(EvaluationDialog.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Error : \n" + ex.getLocalizedMessage());
                }
            }
        }).start();
       
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void evalParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evalParamButtonActionPerformed
        EvalParamDialog evalParamDialog = new EvalParamDialog((Frame)this.getParent(), project.getEvaluators());
        evalParamDialog.setVisible(true);
    }//GEN-LAST:event_evalParamButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.thema.common.swing.SelectFilePanel buildResidselectFilePanel;
    private org.thema.common.swing.SelectFilePanel buildTotselectFilePanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton evalParamButton;
    private org.thema.mupcity.evaluation.EvaluatorSelectionPanel evalSelectionPanel;
    private org.thema.common.swing.SelectFilePanel extScenarioSelectFilePanel;
    private javax.swing.JRadioButton externScenarioRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nameTextField;
    private org.thema.common.swing.SelectFilePanel netN1SelectFilePanel;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox scenarioComboBox;
    private javax.swing.JRadioButton scenarioRadioButton;
    private javax.swing.JSpinner seuilSpinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
