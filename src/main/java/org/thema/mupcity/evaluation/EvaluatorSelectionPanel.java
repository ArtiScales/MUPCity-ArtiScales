/*
 * Copyright (C) 2015 Laboratoire ThéMA - UMR 6049 - CNRS / Université de Franche-Comté
 * http://thema.univ-fcomte.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package org.thema.mupcity.evaluation;

import java.util.*;
import javax.swing.table.DefaultTableModel;
import org.thema.mupcity.AHP;
import org.thema.mupcity.AHPDialog;
import org.thema.mupcity.Project;

/**
 * Panel for selecting evaluator and weights
 * 
 * @author Gilles Vuidel
 */
public class EvaluatorSelectionPanel extends javax.swing.JPanel {

    private Project project;
    private AHP ahp;
    
    /**
     * Creates a new EvaluatorSelectionPanel.
     * The method {@link #setProject(org.thema.mupcity.Project) } must be called before using this panel.
     */
    public EvaluatorSelectionPanel() {
        initComponents();
    }
    
    /**
     * Sets the current project and adds usable evaluators from the project.
     * 
     * @param project the project
     */
    public void setProject(Project project) {
        this.project = project;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for(Evaluator eval : project.getEvaluators()) {
            if(eval.isUsable()) {
                model.addRow(new Object[]{eval, true, 1.0});
            }
        }
    }

    private void setCoefEvaluators(Map<String, Double> coefEvaluators) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setNumRows(0);
        for(Evaluator eval : project.getEvaluators()) {
            if(coefEvaluators.containsKey(eval.getShortName())) { 
                model.addRow(new Object[]{eval, true, coefEvaluators.get(eval.getShortName())});
            } else {
                model.addRow(new Object[]{eval, false, Double.NaN});
            }
        }
    }
    
    /**
     * Returns a map with the name of the evaluators used and their weight.
     * @return the weight for each evaluator used
     */
    public Map<String, Double> getCoefEvaluators() {
       Map<String, Double> coefEvaluators = new LinkedHashMap<>();
       DefaultTableModel model = (DefaultTableModel) table.getModel();
       for(int i = 0; i < model.getRowCount(); i++) {
           if((Boolean)model.getValueAt(i, 1)) {
               coefEvaluators.put(((Evaluator)model.getValueAt(i, 0)).getShortName(), (Double)model.getValueAt(i, 2));
           }
       }
       return coefEvaluators;
    }

    /**
     * @return the ahp matrix used to define the weights
     */
    public AHP getAHP() {
        updateAHP();
        return ahp;
    }
    
    /**
     * @return true if average agregation is used, false for yager agregation
     */
    public boolean isAgregMean() {
        return meanRadioButton.isSelected();      
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        ahpButton = new javax.swing.JButton();
        YagerRadioButton = new javax.swing.JRadioButton();
        meanRadioButton = new javax.swing.JRadioButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Evaluation", "Enabled", "Coef"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        ahpButton.setText("Define coef by AHP");
        ahpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ahpButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(YagerRadioButton);
        YagerRadioButton.setSelected(true);
        YagerRadioButton.setText("Yager");

        buttonGroup1.add(meanRadioButton);
        meanRadioButton.setText("Mean");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(YagerRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meanRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(ahpButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ahpButton)
                    .addComponent(YagerRadioButton)
                    .addComponent(meanRadioButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateAHP() {
        Set<String> evaluators = getCoefEvaluators().keySet();
        if(ahp == null || !ahp.getMatrix().getKeys1().containsAll(evaluators)) {
            ahp = new AHP(new ArrayList<>(evaluators));
        } else {            
            if(!evaluators.containsAll(ahp.getMatrix().getKeys1())) {
                HashSet<String> set = new HashSet<>(ahp.getMatrix().getKeys1());
                set.removeAll(evaluators);
                for(String rule : set)  {
                    ahp.getMatrix().removeKey1(rule);
                    ahp.getMatrix().removeKey2(rule);
                }
            }   
        }
    }
    private void ahpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ahpButtonActionPerformed
        updateAHP();
        AHPDialog dlg = new AHPDialog(null, ahp);
        dlg.setVisible(true);
        if(!dlg.isOk) {
            return;
        }
        ahp = dlg.ahp;
        setCoefEvaluators(ahp.getCoefs());
    }//GEN-LAST:event_ahpButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton YagerRadioButton;
    private javax.swing.JButton ahpButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton meanRadioButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
