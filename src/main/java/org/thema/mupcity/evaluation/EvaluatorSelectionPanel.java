/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thema.mupcity.evaluation;

import java.util.*;
import javax.swing.table.DefaultTableModel;
import org.thema.mupcity.AHP;
import org.thema.mupcity.AHPDialog;
import org.thema.mupcity.Project;

/**
 *
 * @author gvuidel
 */
public class EvaluatorSelectionPanel extends javax.swing.JPanel {

    AHP ahp;
    
    public EvaluatorSelectionPanel() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        // pour la phase de d√©veloppement dans NetBeans
        if(Project.getProject() != null)
            for(Evaluator eval : Project.getProject().getEvaluators())
                if(eval.isUsable())
                    model.addRow(new Object[]{eval, true, 1.0});
        String  toto= "java" ; 
    }
    
    public EvaluatorSelectionPanel(Map<String, Double> coefEvaluators) {
        initComponents();
        setCoefEvaluators(coefEvaluators);
    }

    public void setCoefEvaluators(Map<String, Double> coefEvaluators) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setNumRows(0);
        for(Evaluator eval : Project.getProject().getEvaluators())
            if(coefEvaluators.containsKey(eval.getShortName())) 
                model.addRow(new Object[]{eval, true, coefEvaluators.get(eval.getShortName())});
            else
                model.addRow(new Object[]{eval, false, Double.NaN});
    }
    
    public Map<String, Double> getCoefEvaluators() {
       Map<String, Double> coefEvaluators = new LinkedHashMap<String, Double>();
       DefaultTableModel model = (DefaultTableModel) table.getModel();
       for(int i = 0; i < model.getRowCount(); i++)
           if((Boolean)model.getValueAt(i, 1))
               coefEvaluators.put(((Evaluator)model.getValueAt(i, 0)).getShortName(), (Double)model.getValueAt(i, 2));
       return coefEvaluators;
    }

    public AHP getAHP() {
        updateAHP();
        return ahp;
    }
    
    public boolean isAgregMean() {
        return meanRadioButton.isSelected();      
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        ahpButton = new javax.swing.JButton();
        YagerRadioButton = new javax.swing.JRadioButton();
        meanRadioButton = new javax.swing.JRadioButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Evaluation", "Enabled", "Coef"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        ahpButton.setText("Define coef by AHP");
        ahpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ahpButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(YagerRadioButton);
        YagerRadioButton.setSelected(true);
        YagerRadioButton.setText("Yager");
        YagerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YagerRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(meanRadioButton);
        meanRadioButton.setText("Mean");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(YagerRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meanRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(ahpButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ahpButton)
                    .addComponent(YagerRadioButton)
                    .addComponent(meanRadioButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateAHP() {
        Set<String> evaluators = getCoefEvaluators().keySet();
        if(ahp == null || !ahp.getMatrix().getKeys1().containsAll(evaluators))
            ahp = new AHP(new ArrayList<String>(evaluators));
        else {
//            if(!ahp.getMatrix().getKeys1().containsAll(rules))
//                for(String rule : rules) {
//                    ahp.getMatrix().addKey1(rule);
//                    ahp.getMatrix().addKey2(rule);
//                }
            
            if(!evaluators.containsAll(ahp.getMatrix().getKeys1())) {
                HashSet<String> set = new HashSet<String>(ahp.getMatrix().getKeys1());
                set.removeAll(evaluators);
                for(String rule : set)  {
                    ahp.getMatrix().removeKey1(rule);
                    ahp.getMatrix().removeKey2(rule);
                }
            }   
            
        }
    }
    private void ahpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ahpButtonActionPerformed
        updateAHP();
        AHPDialog dlg = new AHPDialog(null, ahp);
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        ahp = dlg.ahp;
        setCoefEvaluators(ahp.getCoefs());
    }//GEN-LAST:event_ahpButtonActionPerformed

    private void YagerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YagerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_YagerRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton YagerRadioButton;
    private javax.swing.JButton ahpButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton meanRadioButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
